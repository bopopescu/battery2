# Generated by Django 2.1 on 2018-08-26 03:19

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AIRDeviceTable',
            fields=[
                ('ID', models.CharField(max_length=8, primary_key=True, serialize=False, unique=True, verbose_name='设备编号')),
                ('currState', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='当前设定流量')),
                ('nextState', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='下一步设定流量')),
                ('IP', models.GenericIPAddressField(blank=True, default='192.168.1.1', null=True, verbose_name='IP地址')),
                ('PortNum', models.IntegerField(blank=True, default=3092, null=True, verbose_name='端口号')),
                ('Addr', models.CharField(blank=True, default='A', max_length=1, null=True, verbose_name='设备编号')),
            ],
        ),
        migrations.CreateModel(
            name='BigTestInfoTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='name', max_length=40, null=True, verbose_name='测试名')),
                ('user', models.CharField(blank=True, default='user', max_length=40, null=True, verbose_name='创建者')),
                ('chnNum', models.IntegerField(blank=True, default=0, null=True, verbose_name='通道号')),
                ('startDate', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
                ('endDate', models.DateTimeField(blank=True, null=True, verbose_name='结束时间')),
                ('completeFlag', models.IntegerField(default=0, verbose_name='完成标志')),
                ('AIRID', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.AIRDeviceTable', verbose_name='AIRID')),
            ],
        ),
        migrations.CreateModel(
            name='boxDeviceTable',
            fields=[
                ('ID', models.CharField(max_length=8, primary_key=True, serialize=False, unique=True, verbose_name='设备编号')),
                ('IP', models.GenericIPAddressField(blank=True, default='192.168.1.1', null=True, verbose_name='IP地址')),
                ('PortNum', models.IntegerField(blank=True, default=3092, null=True, verbose_name='端口号')),
                ('Addr', models.IntegerField(blank=True, default=0, null=True, verbose_name='箱号')),
                ('totalChnNum', models.IntegerField(blank=True, default=0, null=True, verbose_name='总通道数')),
            ],
        ),
        migrations.CreateModel(
            name='cellDeviceTable',
            fields=[
                ('cellID', models.CharField(max_length=8, primary_key=True, serialize=False, unique=True, verbose_name='电池编号')),
                ('chnNum', models.IntegerField(blank=True, default=0, null=True, verbose_name='通道号')),
                ('coefH2', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=2, null=True, verbose_name='比率系数')),
                ('coefN2', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=2, null=True, verbose_name='比率系数')),
                ('coefCH4', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=2, null=True, verbose_name='比率系数')),
                ('coefH2O', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=2, null=True, verbose_name='比率系数')),
                ('coefAIR', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=2, null=True, verbose_name='比率系数')),
                ('coefCO2', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=2, null=True, verbose_name='比率系数')),
                ('boxID', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.boxDeviceTable', verbose_name='负载ID')),
                ('mAIRID', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.AIRDeviceTable', verbose_name='AIR流量计ID')),
            ],
        ),
        migrations.CreateModel(
            name='cellPlanDetailTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step', models.IntegerField(default=1, verbose_name='工步号')),
                ('mode', models.CharField(choices=[('停止', '停止'), ('静置', '静置'), ('恒流充电', '恒流充电'), ('恒流放电', '恒流放电'), ('恒压充电', '恒压充电'), ('恒压放电', '恒压放电'), ('恒压限流充电', '恒压限流充电'), ('恒压限流放电', '恒压限流放电'), ('恒阻放电', '恒阻放电'), ('恒功率充电', '恒功率充电'), ('恒功率放电', '恒功率放电'), ('循环', '循环'), ('跳转', '跳转'), ('电压采样', '电压采样')], default='静置', max_length=10, verbose_name='工作模式')),
                ('i', models.IntegerField(blank=True, null=True, verbose_name='电流/uA')),
                ('u', models.IntegerField(blank=True, null=True, verbose_name='电压/uV')),
                ('r', models.IntegerField(blank=True, null=True, verbose_name='电阻/ohm')),
                ('p', models.IntegerField(blank=True, null=True, verbose_name='功率/W')),
                ('n', models.IntegerField(blank=True, null=True, verbose_name='循环次数')),
                ('nStart', models.IntegerField(blank=True, null=True, verbose_name='循环开始工步')),
                ('nStop', models.IntegerField(blank=True, null=True, verbose_name='循环结束工步')),
                ('nTarget', models.IntegerField(blank=True, null=True, verbose_name='跳转工步号')),
                ('tTH', models.IntegerField(blank=True, null=True, verbose_name='时间限制/ms')),
                ('iTH', models.IntegerField(blank=True, null=True, verbose_name='电流限制/uA')),
                ('uTH', models.IntegerField(blank=True, null=True, verbose_name='电压限制/uV')),
                ('qTH', models.IntegerField(blank=True, null=True, verbose_name='容量限制/uAh')),
                ('qATH', models.IntegerField(blank=True, null=True, verbose_name='累计容量限制/uAh')),
                ('recordMode', models.CharField(blank=True, choices=[('无', '无'), ('定时差', '定时差'), ('定压差', '定压差'), ('定流差', '定流差'), ('定容差', '定容差'), ('固定电压尾数', '固定电压尾数')], default='无', max_length=10, null=True, verbose_name='工步记录条件')),
                ('recordPara', models.IntegerField(blank=True, null=True, verbose_name='工步记录参数')),
                ('tRECORD', models.IntegerField(blank=True, null=True, verbose_name='定时差记录/ms')),
                ('uRECORD', models.IntegerField(blank=True, null=True, verbose_name='定压差记录/uV')),
                ('iRECORD', models.IntegerField(blank=True, null=True, verbose_name='定流差记录/uA')),
                ('qRECORD', models.IntegerField(blank=True, null=True, verbose_name='定容差记录/uAh')),
                ('imaxProtect', models.IntegerField(blank=True, null=True, verbose_name='过流保护')),
                ('iminProtect', models.IntegerField(blank=True, null=True, verbose_name='欠流保护')),
                ('umaxProtect', models.IntegerField(blank=True, null=True, verbose_name='过压保护')),
                ('uminProtect', models.IntegerField(blank=True, null=True, verbose_name='欠压保护')),
                ('TmaxProtect', models.IntegerField(blank=True, null=True, verbose_name='高温保护')),
                ('TminProtect', models.IntegerField(blank=True, null=True, verbose_name='低温保护')),
            ],
        ),
        migrations.CreateModel(
            name='cellPlanTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='name', max_length=40, null=True, verbose_name='方案名')),
                ('date', models.DateTimeField(auto_now=True, null=True, verbose_name='方案创建时间')),
                ('steps', models.IntegerField(default=0, verbose_name='总工步数')),
                ('user', models.CharField(blank=True, default='user', max_length=40, null=True, verbose_name='创建者')),
            ],
        ),
        migrations.CreateModel(
            name='cellTestHistoryDataTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('totalStepN', models.IntegerField(blank=True, default=0, null=True, verbose_name='总工步数')),
                ('currState', models.CharField(blank=True, choices=[('stop', '停止'), ('pause', '暂停'), ('start', '启动'), ('resume', '继续')], max_length=10, null=True, verbose_name='当前状态')),
                ('nextState', models.CharField(blank=True, choices=[('stop', '停止'), ('pause', '暂停'), ('start', '启动'), ('resume', '继续')], max_length=10, null=True, verbose_name='下一步状态')),
                ('conState', models.IntegerField(blank=True, default=0, null=True, verbose_name='联机状态')),
                ('chState', models.IntegerField(blank=True, default=0, null=True, verbose_name='通道状态')),
                ('chStateCode', models.IntegerField(blank=True, default=0, null=True, verbose_name='通道异常代码')),
                ('chMasterSlaveFlag', models.IntegerField(blank=True, default=0, null=True, verbose_name='通道主从标志')),
                ('n', models.IntegerField(blank=True, default=0, null=True, verbose_name='当前工步号')),
                ('k', models.IntegerField(blank=True, default=0, null=True, verbose_name='当前过程号')),
                ('mode', models.IntegerField(blank=True, default=0, null=True, verbose_name='工作模式')),
                ('tc', models.IntegerField(blank=True, default=0, null=True, verbose_name='本工步已工作时间')),
                ('ta', models.IntegerField(blank=True, default=0, null=True, verbose_name='本工步累计时间')),
                ('i', models.IntegerField(blank=True, default=0, null=True, verbose_name='实时电流')),
                ('u', models.IntegerField(blank=True, default=0, null=True, verbose_name='实时电压')),
                ('q', models.IntegerField(blank=True, default=0, null=True, verbose_name='实时容量')),
                ('qA', models.IntegerField(blank=True, default=0, null=True, verbose_name='累计容量')),
                ('T', models.IntegerField(blank=True, default=0, null=True, verbose_name='当前温度')),
                ('r', models.IntegerField(blank=True, default=0, null=True, verbose_name='当前内阻')),
                ('detailDataFlag', models.IntegerField(blank=True, default=0, null=True, verbose_name='是否有明细数据')),
                ('resultDataFlag', models.IntegerField(blank=True, default=0, null=True, verbose_name='是否有结果数据')),
                ('overOutDataFlag', models.IntegerField(blank=True, default=0, null=True, verbose_name='是否有数据溢出')),
                ('powerDownFlag', models.IntegerField(blank=True, default=0, null=True, verbose_name='是否有设备断电')),
                ('celldata_time', models.DateTimeField(auto_now=True, null=True, verbose_name='电池数据修改时间')),
                ('sH2', models.IntegerField(blank=True, default=0, null=True, verbose_name='H2通讯状态')),
                ('qH2', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, null=True, verbose_name='H2流量')),
                ('tH2', models.DateTimeField(auto_now=True, null=True, verbose_name='H2数据修改时间')),
                ('sN2', models.IntegerField(blank=True, default=0, null=True, verbose_name='N2通讯状态')),
                ('qN2', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, null=True, verbose_name='N2流量')),
                ('tN2', models.DateTimeField(auto_now=True, null=True, verbose_name='N2数据修改时间')),
                ('sCO2', models.IntegerField(blank=True, default=0, null=True, verbose_name='CO2通讯状态')),
                ('qCO2', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, null=True, verbose_name='CO2流量')),
                ('tCO2', models.DateTimeField(auto_now=True, verbose_name='CO2数据修改时间')),
                ('sCH4', models.IntegerField(blank=True, default=0, null=True, verbose_name='CH4通讯状态')),
                ('qCH4', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, null=True, verbose_name='CH4流量')),
                ('tCH4', models.DateTimeField(auto_now=True, null=True, verbose_name='CH4数据修改时间')),
                ('sAIR', models.IntegerField(blank=True, default=0, null=True, verbose_name='AIR通讯状态')),
                ('qAIR', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, null=True, verbose_name='空气流量')),
                ('tAIR', models.DateTimeField(auto_now=True, null=True, verbose_name='AIR数据修改时间')),
                ('sH2O', models.IntegerField(blank=True, default=0, null=True, verbose_name='H2O通讯状态')),
                ('qH2O', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, null=True, verbose_name='水流量')),
                ('tH2O', models.DateTimeField(auto_now=True, null=True, verbose_name='H2O数据修改时间')),
                ('sT0', models.IntegerField(blank=True, default=0, null=True, verbose_name='T0通讯状态')),
                ('T0', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=5, null=True, verbose_name='温度监测点0')),
                ('tT0', models.DateTimeField(auto_now=True, null=True, verbose_name='T0数据修改时间')),
                ('sT1', models.IntegerField(blank=True, default=0, null=True, verbose_name='T1通讯状态')),
                ('T1', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=5, null=True, verbose_name='温度监测点1')),
                ('tT1', models.DateTimeField(auto_now=True, null=True, verbose_name='T1数据修改时间')),
                ('sT2', models.IntegerField(blank=True, default=0, null=True, verbose_name='T2通讯状态')),
                ('T2', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=5, null=True, verbose_name='温度监测点2')),
                ('tT2', models.DateTimeField(auto_now=True, null=True, verbose_name='T2数据修改时间')),
                ('sT3', models.IntegerField(blank=True, default=0, null=True, verbose_name='T3通讯状态')),
                ('T3', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=5, null=True, verbose_name='温度监测点3')),
                ('tT3', models.DateTimeField(auto_now=True, null=True, verbose_name='T3数据修改时间')),
                ('sT4', models.IntegerField(blank=True, default=0, null=True, verbose_name='T4通讯状态')),
                ('T4', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=5, null=True, verbose_name='温度监测点4')),
                ('tT4', models.DateTimeField(auto_now=True, null=True, verbose_name='T4数据修改时间')),
                ('bigTestID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apps.BigTestInfoTable', verbose_name='bigTestID')),
            ],
        ),
        migrations.CreateModel(
            name='cellTestRealDataTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chnNum', models.IntegerField(blank=True, default=0, null=True, verbose_name='通道号')),
                ('totalStepN', models.IntegerField(blank=True, default=0, null=True, verbose_name='总工步数')),
                ('currState', models.CharField(blank=True, choices=[('stop', '停止'), ('pause', '暂停'), ('start', '启动'), ('resume', '继续')], default='stop', max_length=10, null=True, verbose_name='当前状态')),
                ('nextState', models.CharField(blank=True, choices=[('stop', '停止'), ('pause', '暂停'), ('start', '启动'), ('resume', '继续')], default='stop', max_length=10, null=True, verbose_name='下一步状态')),
                ('conState', models.IntegerField(blank=True, default=0, null=True, verbose_name='联机状态')),
                ('chState', models.IntegerField(blank=True, default=0, null=True, verbose_name='通道状态')),
                ('chStateCode', models.IntegerField(blank=True, default=0, null=True, verbose_name='通道异常代码')),
                ('chMasterSlaveFlag', models.IntegerField(blank=True, default=0, null=True, verbose_name='通道主从标志')),
                ('n', models.IntegerField(blank=True, default=0, null=True, verbose_name='当前工步号')),
                ('k', models.IntegerField(blank=True, default=0, null=True, verbose_name='当前过程号')),
                ('mode', models.IntegerField(blank=True, default=0, null=True, verbose_name='工作模式')),
                ('tc', models.IntegerField(blank=True, default=0, null=True, verbose_name='本工步已工作时间')),
                ('ta', models.IntegerField(blank=True, default=0, null=True, verbose_name='本工步累计时间')),
                ('i', models.IntegerField(blank=True, default=0, null=True, verbose_name='实时电流')),
                ('u', models.IntegerField(blank=True, default=0, null=True, verbose_name='实时电压')),
                ('q', models.IntegerField(blank=True, default=0, null=True, verbose_name='实时容量')),
                ('qA', models.IntegerField(blank=True, default=0, null=True, verbose_name='累计容量')),
                ('T', models.IntegerField(blank=True, default=0, null=True, verbose_name='当前温度')),
                ('r', models.IntegerField(blank=True, default=0, null=True, verbose_name='当前内阻')),
                ('detailDataFlag', models.IntegerField(blank=True, default=0, null=True, verbose_name='是否有明细数据')),
                ('resultDataFlag', models.IntegerField(blank=True, default=0, null=True, verbose_name='是否有结果数据')),
                ('overOutDataFlag', models.IntegerField(blank=True, default=0, null=True, verbose_name='是否有数据溢出')),
                ('powerDownFlag', models.IntegerField(blank=True, default=0, null=True, verbose_name='是否有设备断电')),
                ('celldata_time', models.DateTimeField(auto_now=True, null=True, verbose_name='电池数据修改时间')),
                ('sH2', models.IntegerField(blank=True, default=0, null=True, verbose_name='H2通讯状态')),
                ('qH2', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, null=True, verbose_name='H2流量')),
                ('tH2', models.DateTimeField(auto_now=True, null=True, verbose_name='H2数据修改时间')),
                ('sN2', models.IntegerField(blank=True, default=0, null=True, verbose_name='N2通讯状态')),
                ('qN2', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, null=True, verbose_name='N2流量')),
                ('tN2', models.DateTimeField(auto_now=True, null=True, verbose_name='N2数据修改时间')),
                ('sCO2', models.IntegerField(blank=True, default=0, null=True, verbose_name='CO2通讯状态')),
                ('qCO2', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, null=True, verbose_name='CO2流量')),
                ('tCO2', models.DateTimeField(auto_now=True, null=True, verbose_name='CO2数据修改时间')),
                ('sCH4', models.IntegerField(blank=True, default=0, null=True, verbose_name='CH4通讯状态')),
                ('qCH4', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, null=True, verbose_name='CH4流量')),
                ('tCH4', models.DateTimeField(auto_now=True, null=True, verbose_name='CH4数据修改时间')),
                ('sAIR', models.IntegerField(blank=True, default=0, null=True, verbose_name='AIR通讯状态')),
                ('qAIR', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, null=True, verbose_name='空气流量')),
                ('tAIR', models.DateTimeField(auto_now=True, null=True, verbose_name='AIR数据修改时间')),
                ('sH2O', models.IntegerField(blank=True, default=0, null=True, verbose_name='H2O通讯状态')),
                ('qH2O', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, null=True, verbose_name='水流量')),
                ('tH2O', models.DateTimeField(auto_now=True, null=True, verbose_name='H2O数据修改时间')),
                ('sT0', models.IntegerField(blank=True, default=0, null=True, verbose_name='T0通讯状态')),
                ('T0', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=5, null=True, verbose_name='温度监测点0')),
                ('tT0', models.DateTimeField(auto_now=True, null=True, verbose_name='T0数据修改时间')),
                ('sT1', models.IntegerField(blank=True, default=0, null=True, verbose_name='T1通讯状态')),
                ('T1', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=5, null=True, verbose_name='温度监测点1')),
                ('tT1', models.DateTimeField(auto_now=True, null=True, verbose_name='T1数据修改时间')),
                ('sT2', models.IntegerField(blank=True, default=0, null=True, verbose_name='T2通讯状态')),
                ('T2', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=5, null=True, verbose_name='温度监测点2')),
                ('tT2', models.DateTimeField(auto_now=True, null=True, verbose_name='T2数据修改时间')),
                ('sT3', models.IntegerField(blank=True, default=0, null=True, verbose_name='T3通讯状态')),
                ('T3', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=5, null=True, verbose_name='温度监测点3')),
                ('tT3', models.DateTimeField(auto_now=True, null=True, verbose_name='T3数据修改时间')),
                ('sT4', models.IntegerField(blank=True, default=0, null=True, verbose_name='T4通讯状态')),
                ('T4', models.DecimalField(blank=True, decimal_places=1, default=0, max_digits=5, null=True, verbose_name='温度监测点4')),
                ('tT4', models.DateTimeField(auto_now=True, null=True, verbose_name='T4数据修改时间')),
                ('bigTestID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apps.BigTestInfoTable', verbose_name='bigTestID')),
                ('boxID', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.boxDeviceTable', verbose_name='箱号')),
                ('cellID', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.cellDeviceTable', verbose_name='cellID')),
            ],
        ),
        migrations.CreateModel(
            name='CH4DeviceTable',
            fields=[
                ('ID', models.CharField(max_length=8, primary_key=True, serialize=False, unique=True, verbose_name='设备编号')),
                ('currState', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='当前设定流量')),
                ('nextState', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='下一步设定流量')),
                ('IP', models.GenericIPAddressField(blank=True, default='192.168.1.1', null=True, verbose_name='IP地址')),
                ('PortNum', models.IntegerField(blank=True, default=3092, null=True, verbose_name='端口号')),
                ('Addr', models.CharField(blank=True, default='A', max_length=1, null=True, verbose_name='设备编号')),
            ],
        ),
        migrations.CreateModel(
            name='CO2DeviceTable',
            fields=[
                ('ID', models.CharField(max_length=8, primary_key=True, serialize=False, unique=True, verbose_name='设备编号')),
                ('currState', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='当前设定流量')),
                ('nextState', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='下一步设定流量')),
                ('IP', models.GenericIPAddressField(blank=True, default='192.168.1.1', null=True, verbose_name='IP地址')),
                ('PortNum', models.IntegerField(blank=True, default=3092, null=True, verbose_name='端口号')),
                ('Addr', models.CharField(blank=True, default='A', max_length=1, null=True, verbose_name='设备编号')),
            ],
        ),
        migrations.CreateModel(
            name='eventTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now=True, verbose_name='T4数据修改时间')),
                ('boxID', models.IntegerField(blank=True, default=0, null=True, verbose_name='箱号')),
                ('chnNum', models.IntegerField(blank=True, default=0, null=True, verbose_name='通道号')),
                ('stepNum', models.IntegerField(blank=True, default=0, verbose_name='工步号')),
                ('objectType', models.CharField(blank=True, choices=[('H2', '恒流'), ('N2', '恒压'), ('CH4', '静置'), ('H2O', '循环'), ('AIR', '循环'), ('RES', '循环'), ('T1', '循环'), ('T2', '循环'), ('T3', '循环'), ('T4', '循环'), ('eLoad', '电子负载')], default='eLoad', max_length=10, verbose_name='告警对象')),
                ('content', models.TextField(max_length=8, verbose_name='事件内容')),
                ('cellID', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='apps.cellDeviceTable', verbose_name='cellID')),
                ('planID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apps.cellPlanTable', verbose_name='测试方案ID')),
            ],
        ),
        migrations.CreateModel(
            name='H2DeviceTable',
            fields=[
                ('ID', models.CharField(max_length=8, primary_key=True, serialize=False, unique=True, verbose_name='设备编号')),
                ('currState', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='当前设定流量')),
                ('nextState', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='下一步设定流量')),
                ('IP', models.GenericIPAddressField(blank=True, default='192.168.1.1', null=True, verbose_name='IP地址')),
                ('PortNum', models.IntegerField(blank=True, default=3092, null=True, verbose_name='端口号')),
                ('Addr', models.CharField(blank=True, default='A', max_length=1, null=True, verbose_name='设备编号')),
            ],
        ),
        migrations.CreateModel(
            name='H2ODeviceTable',
            fields=[
                ('ID', models.CharField(max_length=8, primary_key=True, serialize=False, unique=True, verbose_name='设备编号')),
                ('currState', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='当前设定流量')),
                ('nextState', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='下一步设定流量')),
                ('IP', models.GenericIPAddressField(blank=True, default='192.168.1.1', null=True, verbose_name='IP地址')),
                ('PortNum', models.IntegerField(blank=True, default=3092, null=True, verbose_name='端口号')),
                ('Addr', models.CharField(blank=True, default='A', max_length=1, null=True, verbose_name='设备编号')),
            ],
        ),
        migrations.CreateModel(
            name='N2DeviceTable',
            fields=[
                ('ID', models.CharField(max_length=8, primary_key=True, serialize=False, unique=True, verbose_name='设备编号')),
                ('currState', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='当前设定流量')),
                ('nextState', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='下一步设定流量')),
                ('IP', models.GenericIPAddressField(blank=True, default='192.168.1.1', null=True, verbose_name='IP地址')),
                ('PortNum', models.IntegerField(blank=True, default=3092, null=True, verbose_name='端口号')),
                ('Addr', models.CharField(blank=True, default='A', max_length=1, null=True, verbose_name='设备编号')),
            ],
        ),
        migrations.CreateModel(
            name='ovenDeviceTable',
            fields=[
                ('ID', models.CharField(max_length=8, primary_key=True, serialize=False, unique=True, verbose_name='设备编号')),
                ('currState', models.CharField(choices=[('stop', '停止'), ('pause', '暂停'), ('start', '启动'), ('resume', '继续')], default='stop', max_length=10, verbose_name='当前状态')),
                ('nextState', models.CharField(choices=[('stop', '停止'), ('pause', '暂停'), ('start', '启动'), ('resume', '继续')], default='stop', max_length=10, verbose_name='下一步状态')),
                ('IP', models.GenericIPAddressField(blank=True, default='192.168.1.1', null=True, verbose_name='IP地址')),
                ('PortNum', models.IntegerField(blank=True, default=0, null=True, verbose_name='端口号')),
                ('Addr', models.IntegerField(blank=True, default=0, null=True, verbose_name='主机号')),
            ],
        ),
        migrations.CreateModel(
            name='ovenPlanDetailTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step', models.IntegerField(default=1, verbose_name='工步号')),
                ('T', models.IntegerField(default=0, verbose_name='目标温度')),
                ('time', models.IntegerField(default=0, verbose_name='工步持续时间')),
            ],
        ),
        migrations.CreateModel(
            name='ovenPlanTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='name', max_length=40, null=True, verbose_name='方案名')),
                ('date', models.DateTimeField(auto_now=True, null=True, verbose_name='方案创建时间')),
                ('steps', models.IntegerField(default=0, verbose_name='总步数')),
                ('user', models.CharField(blank=True, default='user', max_length=40, null=True, verbose_name='创建者')),
            ],
        ),
        migrations.CreateModel(
            name='testInfoTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='name', max_length=40, null=True, verbose_name='测试名')),
                ('user', models.CharField(blank=True, default='user', max_length=40, null=True, verbose_name='创建者')),
                ('chnNum', models.IntegerField(default=0, verbose_name='通道号')),
                ('startDate', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
                ('endDate', models.DateTimeField(blank=True, null=True, verbose_name='结束时间')),
                ('completeFlag', models.IntegerField(default=0, verbose_name='完成标志')),
                ('bigTestID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apps.BigTestInfoTable', verbose_name='大测试ID')),
                ('boxID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apps.boxDeviceTable', verbose_name='boxID')),
                ('cellID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apps.cellDeviceTable', verbose_name='cellID')),
                ('planID', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.cellPlanTable', verbose_name='测试方案ID')),
            ],
        ),
        migrations.CreateModel(
            name='wdjDeviceTable',
            fields=[
                ('ID', models.CharField(max_length=8, primary_key=True, serialize=False, unique=True, verbose_name='设备编号')),
                ('IP', models.GenericIPAddressField(blank=True, default='192.168.1.1', null=True, verbose_name='IP地址')),
                ('PortNum', models.IntegerField(blank=True, default=3092, null=True, verbose_name='端口号')),
                ('Addr', models.IntegerField(blank=True, default=0, null=True, verbose_name='主机号')),
            ],
        ),
        migrations.AddField(
            model_name='ovenplandetailtable',
            name='ovenPlanID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apps.ovenPlanTable', verbose_name='炉子测试方案ID'),
        ),
        migrations.AddField(
            model_name='ovendevicetable',
            name='ovenPlanID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.ovenPlanTable', verbose_name='炉子测试方案ID'),
        ),
        migrations.AddField(
            model_name='eventtable',
            name='testID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apps.testInfoTable', verbose_name='测试ID'),
        ),
        migrations.AddField(
            model_name='celltestrealdatatable',
            name='testID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.testInfoTable', verbose_name='testID'),
        ),
        migrations.AddField(
            model_name='celltesthistorydatatable',
            name='testID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.testInfoTable', verbose_name='testID'),
        ),
        migrations.AddField(
            model_name='cellplandetailtable',
            name='planID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apps.cellPlanTable', verbose_name='电子负载测试方案ID'),
        ),
        migrations.AddField(
            model_name='celldevicetable',
            name='mCH4ID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.CH4DeviceTable', verbose_name='CH4流量计ID'),
        ),
        migrations.AddField(
            model_name='celldevicetable',
            name='mCO2ID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.CO2DeviceTable', verbose_name='CO2流量计ID'),
        ),
        migrations.AddField(
            model_name='celldevicetable',
            name='mH2ID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.H2DeviceTable', verbose_name='H2流量计ID'),
        ),
        migrations.AddField(
            model_name='celldevicetable',
            name='mH2OID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.H2ODeviceTable', verbose_name='H2O流量计ID'),
        ),
        migrations.AddField(
            model_name='celldevicetable',
            name='mN2ID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.N2DeviceTable', verbose_name='N2流量计ID'),
        ),
        migrations.AddField(
            model_name='celldevicetable',
            name='mT0ID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.ovenDeviceTable', verbose_name='炉子ID'),
        ),
        migrations.AddField(
            model_name='celldevicetable',
            name='mT1ID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.wdjDeviceTable', verbose_name='温度计ID'),
        ),
        migrations.AddField(
            model_name='bigtestinfotable',
            name='CH4ID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.CH4DeviceTable', verbose_name='CH4ID'),
        ),
        migrations.AddField(
            model_name='bigtestinfotable',
            name='CO2ID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.CO2DeviceTable', verbose_name='CO2ID'),
        ),
        migrations.AddField(
            model_name='bigtestinfotable',
            name='H2ID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.H2DeviceTable', verbose_name='H2ID'),
        ),
        migrations.AddField(
            model_name='bigtestinfotable',
            name='H2OID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.H2ODeviceTable', verbose_name='H2OID'),
        ),
        migrations.AddField(
            model_name='bigtestinfotable',
            name='N2ID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.N2DeviceTable', verbose_name='N2ID'),
        ),
        migrations.AddField(
            model_name='bigtestinfotable',
            name='boxID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.boxDeviceTable', verbose_name='boxID'),
        ),
        migrations.AddField(
            model_name='bigtestinfotable',
            name='cellID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.cellDeviceTable', verbose_name='cellID'),
        ),
        migrations.AddField(
            model_name='bigtestinfotable',
            name='ovenID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.ovenDeviceTable', verbose_name='ovenID'),
        ),
        migrations.AddField(
            model_name='bigtestinfotable',
            name='ovenPlanID',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='apps.ovenPlanTable', verbose_name='炉子测试方案ID'),
        ),
    ]
